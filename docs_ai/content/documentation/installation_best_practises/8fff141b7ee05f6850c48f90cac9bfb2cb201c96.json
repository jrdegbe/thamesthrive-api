{"file_name": "docs/installation/best_practises.md", "questions": ["What is the best practice for setting up an encrypted connection to the ThamesThrive API?", "How to set up an encrypted connection to the ThamesThrive API?", "What is the recommended setup for ThamesThrive API clusters?", "How to separate the track server and GUI API?", "What is the recommended way to scale ThamesThrive?", "How to scale ThamesThrive?"], "answer": "# Installation best practises\nIt is highly recommended to set up an encrypted connection when accessing the ThamesThrive API. One way to do this is to\nencode the traffic as it is sent to the load balancer, but leave the internal cluster traffic decoded. This allows for\nsecure communication with the API while still allowing for efficient communication within the cluster. If you prefer to\nhave encoded traffic throughout the entire cluster, you will need to prepare HTTPS versions of the ThamesThrive Docker\nimages. This will ensure that all traffic, both external and internal, is encrypted for added security. It is important\nto carefully consider the security measures in place when working with sensitive data, and setting up an encrypted\nconnection to the ThamesThrive API is an important step in protecting this information. See\nthe [documentation on how to do it](../configuration/ThamesThrive_ssl.md).\n\n## Separation of track server and GUI API\n\nBest practice is to have a setup of 2 ThamesThrive API clusters. One for GUI and one for event collection.\n\nThe event collecting cluster, the one available on the Internet, should be configured with environment\nvariable `EXPOSE_GUI_API` set to `no`. This way the publicly available API will have only `/track` endpoint available.\nAll other endpoints that are required by the GUI will be disabled. This cluster will be used for event collection from\nthe website or other sources available on the Internet.\n\nAnother cluster, the one available in the internal network, or available on the Internet but restricted to certain set\nof IPs, should have the environment variable `EXPOSE_GUI_API` set to `yes`. This cluster will be used by GUI to control\nThamesThrive.\n\n## Scaling\n\nScaling refers to the process of increasing or decreasing the capacity of a system to meet the demands of incoming\ntraffic. In the context of ThamesThrive, scaling may involve increasing the number of servers or instances (ThamesThrive-api) in\norder to handle a larger volume of event tracking requests.\n\nThamesThrive is a stateless system, meaning that it does not rely on storing data locally in order to function. This makes\nit easier to scale, as new instances of ThamesThrive can be added or removed without affecting the overall functioning of\nthe system. We recommend using Kubernetes, a container orchestration platform, to manage the scaling and maintenance of\nthe ThamesThrive cluster. ThamesThrive does not require long-lasting sticky sessions, so it can be easily killed and re-launched\nwithout disrupting the cluster.\n"}
