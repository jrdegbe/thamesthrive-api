{
  "file_name": "docs/plugins/tutorial/part2.md",
  "questions": [
    "What is the purpose of the form in the plugin configuration?"
  ],
  "answer": "\n    )\n```\n\n1. Notice that we imported new classes\n2. Form declaration. It consists of `FormGroups` and `FormFields` inside a `FormGroup`\n3. Notice that `FormField` id is equal to init property. This is how you bind configuration with the form field.\n4. THis defines what kind of component to use in the field. This one is text.\n\nThe form property defines a form that will be build automatically and will bind form fields with JSON configuration\nobject. Form consists of `FormGroups` and `FormFields` inside a `FormGroup`. `FormGroup` is just a type of grouping\nto make forms more readable. You may have any number of groups you want. It consists of name and description and a\nlist of `FormField` objects. Form field defines the type of field we display and an id. ID must be equal to one of the\nconfiguration properties. Here we bind first field with the `event_type` property of the JSON configuration object.\nProperty `component` defines the field component to use to edit the `event_type`.\n\nThe list of available components can be found [here](../forms/list_of_field_types.md).\n\nWhen you reinstall the plugin you should see the form in the plugin configuration. Everytime you change something in\nthe form it should be visible in the JSON configuration and vice-versa.\n\n## Wrap-up\n\nAnd this concludes the second part of the tutorial. We added the plugin configuration and attached a from to it.\nIn the third part we will extend our plugin with the resource and reference the data\nwith [dot notation](../../notations/dot_notation.md).\n"
}

