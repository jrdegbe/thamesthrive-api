{"file_name": "docs/integration/js/advanced.md", "questions": ["{\u2026} }", "```", "What is the purpose of setting the `fire` parameter to `true`?"], "answer": "# Advanced configurations\n## Sending event on demand\n\nThamesThrive offers the flexibility to send events immediately when the fire parameter is set to true, enabling real-time\nevent triggering and ensuring that data is captured and processed instantly. By default, events are queued and sent when\nthe web page is fully rendered, which is beneficial for consolidating events and sending them as a single request.\nHowever, there are scenarios where sending events immediately upon certain actions, such as button clicks, is necessary.\nSending Events in Real-Time\n\nTo send events in real-time, simply set the `fire` parameter to `true` when making API requests or using the ThamesThrive\nJavaScript snippet on your web page. This will bypass the event queue and send the events without any delay.\n\nThis feature is particularly useful in scenarios where real-time data processing is critical, such as tracking user\ninteractions, capturing user behavior, and implementing dynamic marketing strategies. \n\n### Example: Breaking the Event Queue\n\nIn some cases, you may need to break the event queue and trigger an event immediately upon a certain event type. \nYou can do this by setting the fire parameter to true in your JavaScript code, as shown in the example\nbelow:\n\n```javascript title=\"Example where we break the event queue\" linenums=\"1\"\nwindow.tracker.track(\"purchase-order\", {\"product\": \"Sun glasses - Badoo\", \"price\": 13.45})\nwindow.tracker.track(\"interest\", {\"Eletronics\": [\"Mobile phones\", \"Accessories\"]}, {\"fire\": true}) //(1)\nwindow.tracker.track(\"page-view\",{});\n```\n\n## Forcing Profile ID\n\nIn certain situations, you may want to send a specific profile ID to ThamesThrive that comes from your backend system. To\nenable this feature, static ID must be enabled in the event source that collects data, and the profile ID must be added\nto the script configuration.\n\nHere's an example:\n\n```html title=\"Example\" linenums=\"1\" hl_lines=\"15-17\"\n\n<script>\n\n        !function(e){\"object\"==typeof exports&&\"undefine...  \n\n        const options = {\n            tracker: {\n                url: {\n                    script: 'http://192.168.1.103:8686/tracker', \n                    api: 'http://192.168.1.103:8686'\n                },\n                source: {\n                    id: \"<your-event-source-id-HERE>\" \n                },\n                profile: {\n                    id: \"<your-static-profile-id-HERE>\" \n                }\n            }\n        }\n</script>\n```\n\nIt's important to note that this will send the provided profile ID regardless of whether a profile ID is already stored\nin the browser's local storage. If event source si not configured to allow static profile ID then System will try\nto load profile with provided ID - it will most probably fail and then it will generate the random ID. Please do\nnot use this feature with events sources that has disabled static profile processing in events source. \n\n!!! Warning\n\n    Please be aware that sending a profile ID that's easy to guess can be a security risk. Attackers can potentially guess\n    the ID and try to corrupt its data. Always use IDs like UUID4 to ensure security.\n\n!!! Notice\n\n    This feature is available from version 0.8.1 up.\n\n## Binding directly to Page Elements\n\nYou can also bind events directly to page elements, such as buttons, using JavaScript code. However, please note that in\nthis case, you may not have access to response data, such as profile ID, etc. The example below shows how you can add an\nonClick event to a button that sends an event when clicked:\n\n```html\n\n<button onClick=\"testClick()\">Test click</button>\n```\n\nWhere the **testClick** function sends an event.\n\n```html title=\"Example\" linenums=\"1\"\n<script>\n  function testClick() {\n     window.tracker.track(\"page-view\", {\"view\": 1});\n  }\n</script>\n```\n\nPlease note that in this case, the event is recorded in the console but not sent to ThamesThrive by default. \n\n```\n[Tracker] Event track \nObject { type: \"track\", event: \"page-view\", properties: {\u2026}, options: "}
