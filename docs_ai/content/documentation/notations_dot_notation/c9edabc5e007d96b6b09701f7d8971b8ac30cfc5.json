{"file_name": "docs/notations/dot_notation.md", "questions": ["What is dot notation?", "How to access data in internal state of workflow using dot notation?", "How to access a part of data using dot notation?", "What is the full access dot notation?", "How to access array items using dot notation?", "How to access an object with spaces in the keys using dot notation?"], "answer": "# Dot notation\nDot notation is a way to access data in internal state of workflow. It is a standard \nway to reference data in ThamesThrive. It is used across many places in ThamesThrive such as \nplugins, destinations, etc. \n\n## Example of dot notation\n\n```\nevent@properties.name\n```\n\nDot notation is build from *source* and *path to data*. Available sources are:\n\n* profile\n* event\n* payload\n* flow\n* session\n* memory\n\nPath is a string of keys that indicate where the data is placed.\n\nFor example if your profile data looks like this\n\n```json\n{\n   \"key\": {\n        \"data\": \"value\"\n   }\n}\n```\n\nTo access \"value\" your path will need to look like this: *key.data*.\n\nThe full access dot notation is *profile@key.data*.\n\n!!! Warning\n\n    If there is an error in dot notation or it is not in a right format e.g `profile.data.name` instead of \n    `profile@data.name` then the result is the typed value, in this example `profile.data.name`. That means that any \n    value that is not a valid dot notation will be returned as is.\n\n## Path to part of data\n\nThere is also a way to access a part of data. \n\nA path like *profile@key* will return:\n\n```json\n{\n  \"data\": \"value\"\n}\n```\n\nTo access all data from profile type:\n\n```bash\nprofile@... #(1)\n```\n\n1. Return the whole profile object\n\nIf you would like to retrieve a sub-object form some bigger object. For example everything below __key__. (see below).\n\n```json\n{\n   \"key\": {\n        \"data\": \"value\"\n   }\n}\n```\n\nThen you need to use the following dot notation:\n\n```bash\nprofile@key #(1)\n```\n\n1. Return everything below __key__. The result will be ```{\"data\": \"value\"}```\n\n## Path to array items\n\n## Arrays\n\nItems in array can be accessed like this. For the payload data:\n\n```json\n{\n  \"data\": [\"value1\", \"value2\"]\n}\n```\n\naccessor that get `value1` should look like this.\n\n```\npayload@data.0\n```\n\n!!! Tip\n\n    Also objects embeded inside arrays can be retrieved the same way.\n\n\n## Object with spaces in the keys\n\nThere are rare cases when you have an object with the keys that contain spaces.\n\n```json title=\"Example\"\n{\n   \"key\": {\n        \"My key with spaces\": \"value\"\n   }\n}\n```\n\nTo access this data you will need to use the following dot notation:\n\n```bash\nprofile@key[\"My key with spaces\"]\n```\n\n!!! Tip\n\n    Also objects embeded inside arrays can be retrieved the same way. For exampel ``` profile@key.0[\"My key with spaces\"] ```", "hash": "c9edabc5e007d96b6b09701f7d8971b8ac30cfc5"}
