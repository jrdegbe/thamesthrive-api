{"file_name": "docs/qa/code/plugins.md", "questions": ["1. What is the purpose of the code snippet?", "2. How to register a plugin in the code?", "3. What are the details specified in the `metadata` section of the code?"], "answer": "# Register plugindef register() -> Plugin:\n    return Plugin(\n        start=False,\n        spec=Spec(\n            module=__name__,  # Module name\n            className=FlowWalker.__name__,  # Class Name\n            inputs=[\"payload\"],  # input ports, must be one\n            outputs=[\"payload\"],  # output ports, may be many\n            version='0.7.1',\n            license=\"MIT\",\n            author=\"Author\"\n        ),\n        metadata=MetaData(\n            name='FlowWalker',  # Plugin name\n            desc='Does nothing.',  # Plugin description\n            icon='error',  # Icon\n            group=[\"Events\"],  # Group in the menu\n            documentation=Documentation(  # Port documentation\n                inputs={  # Documentation for input port. We defined that input port is named 'payload`\n                    \"payload\": PortDoc(desc=\"This port takes payload object.\")\n                },\n                outputs={ # Documentation for output port. We defined that output port is also named 'payload`\n                    \"payload\": PortDoc(desc=\"This port returns given payload without any changes.\")\n                }\n            )\n        )\n    )\n\n```\n\nNotice that `outputs=[\"payload\"]` matches the `return Result(port=\"payload\", value=payload)` and \n\n```python\noutputs={ \"payload\": PortDoc(desc=\"This port returns given payload without any changes.\") }\n```\n\nThe same with `inputs=[\"payload\"]` that matches: \n\n```python\ninputs={  \"payload\": PortDoc(desc=\"This port takes payload object.\") }\n```\n\nin the documentation propery of object metadata.\n", "hash": "5927dbe868e45476c1d80a33e4291672c51a2cc3"}
