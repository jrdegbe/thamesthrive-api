{"file_name": "docs/integration/js/response.md", "questions": ["What is the structure of event response in ThamesThrive?"], "answer": "# Event response\nEvent response in ThamesThrive refers to the data that is sent back from the server after processing an event. This response\ntypically includes information about the current profile ID and may also contain additional data based on the\nconfigurations and logic defined within workflows. \n\n## Structure of Event Response\n\nEvent responses in ThamesThrive are structured in JSON format and contain various keys and values. The response typically\nincludes information related to different aspects of the workflow, such as saved events, errors, IDs, and types. For\nexample, in the provided example response:\n\n```json\n{\n  \"response\": {\n    \"segments\": [\"a\", \"b\"]\n  },\n  \"ux\": {},\n  \"profile\": {\n    \"id\": \"0d2d9dc5-0d60-471e-956f-8766dcb8aba2\"\n  }\n}\n```\n\nThe above response includes information about segments, profile ID, etc. \n\nThamesThrive provides you with the flexibility to configure response data within each event type workflow. This means that\nyou can define what data should be included in the response generated by a specific workflow, which is bound to a\ndefined event type and its properties. The response data can be structured and organized using response keys, such as\n`segments`, which are defined fields that contain the data returned by a workflow and can be copied from a profile, for\nexample.\n\nBy configuring response data in your event type workflows, you can specify the data that should be included in the\nresponse generated by that particular workflow. This allows you to return and data captured and processed in ThamesThrive\nbased on your specific requirements and business needs. You can define the response keys that should be included in the\nresponse, which can be used in downstream processes for further analysis, actions, and decision-making \n(e.g. content personalisation).\n\n## Capturing Tracker Response\n\nThamesThrive allows you to capture the event response, which can be useful for customizing page content based on customer\nsegments or utilizing data returned from workflows. In the provided example, the event response is captured using the\nwindow.onThamesThriveReady event and accessed through the context.response object. For example:\n\n```javascript title=\"Example\" \n // Change page if has response custom.text\n window.onThamesThriveReady.bind( ({tracker, helpers, context, config}) => {\n     if(context?.response?.custom?.text) {\n         const customText = document.getElementById('custom')\n         customText.innerText = context?.response?.custom?.text\n     }\n })\n```\n\nIn the above example, the context.response.custom.text value is accessed from the response and used to update the\ncontent of an HTML element with the id attribute of 'custom'. This allows you to dynamically change the page content\nbased on the data returned from ThamesThrive workflows.\n\n## Binding Page Elements\n\nYou can also bind events to page elements. To do that you will need to be sure that the page loads and every element of\nthe page is accessible.\n\nTo do that bind the function to `window.onThamesThriveReady` property.\n\n```javascript title=\"Example\" linenums=\"1\"\nwindow.onThamesThriveReady.bind( ({helpers, context, config, tracker}) => {\n      // Code that binds events.\n    }\n});\n```\n\nThe whole configuration should look like this.\n\n```html title=\"Example\" linenums=\"1\"\n\n<script>\n        !function(e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):(\"undefined\"!=typeo...\n\n        window.onThamesThriveReady.bind( ({helpers, context, config, tracker}) => {\n              // Code that binds events.\n            }\n        });\n\n        const options = {\n            tracker: {\n                url: {\n                    script: 'http://192.168.1.103:8686/tracker',\n                    api: 'http://192.168.1.103:8686'\n                },\n                source: {\n                    id: \"ee2db027-46cf-4034-a759-79f1c930f80d\"\n                }\n            }\n        }\n        \n  </script>\n```\n\nThe above example will run on every page "}
