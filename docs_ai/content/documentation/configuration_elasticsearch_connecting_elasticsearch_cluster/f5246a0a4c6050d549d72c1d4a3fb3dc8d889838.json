{"file_name": "docs/configuration/elasticsearch/connecting_elasticsearch_cluster.md", "questions": ["How to connect to an elastic cluster?", "What is the configuration for connecting to an elastic cluster?", "How to configure ThamesThrive connection to elastic?", "How to configure SSL for connecting to an elasticsearch cluster?", "How to obtain an API key for elasticsearch Service?", "How to configure connection with API_KEY?", "How to configure connection with CLOUD_ID?", "How to set ELASTIC_VERIFY_CERTS?", "What is the configuration for more advanced connection types?"], "answer": "## Connecting to elastic cluster\n\nTo connect to elastic cluster you must provide location to all cluster nodes. To configure ThamesThrive connection to\nelastic change ELASTIC_HOST in docker-standalone.yaml file.\n\n```yaml\n    ELASTIC_HOST: \"node-1,node-2,node-3\"\n```\n\nIf your cluster is behind a reverse proxy you will need only one url.\n\n### SSL and Authentication\n\nYou can configure ThamesThrive to use SSL for connecting to your elasticsearch cluster. Use RFC-1738 to specify the urls:\n\n```yaml\n    ELASTIC_HOST: \"https://user:secret@node-1:443,https://user:secret@node-2:443,https://user:secret@node-3:443\"\n```\n\nThere is another way to connect to elastic cluster.\n\n```yaml\n    ELASTIC_HOST: \"node-1,node-2,node-3\",\n    ELASTIC_PORT: 443,\n    ELASTIC_SCHEME: \"https\",\n    ELASTIC_HTTP_AUTH_USERNAME: \"user\",\n    ELASTIC_HTTP_AUTH_PASSWORD: \"pass\",\n```\n\nTo include certificate verification and HTTP type the following line:\n\n```yaml\n    ELASTIC_CA_FILE: \"path to certificate\",\n```\n\n### Connect using API_KEY\n\nElasticsearch Service supports API key-based authentication.\n\nTo obtain an API key:\n\n* Log in to the Elasticsearch Service Console.\n* Select your deployment on the home page in the Elasticsearch Service card or go to the deployments page.\n* Under the Features tab, open the API keys page. Any keys currently associated with your account are listed.\n* Select Generate API key.\n* Provide a name and select Generate API key.\n* Copy the generated API key and store it in a safe place. You can also download the key as a CSV file.\n\nThe API key has no expiration, so it may be used indefinitely. The API key has the same permissions as the API key\nowner. You may have multiple API keys for different purposes and you can revoke them when you no longer need them.\n\nHere is the configuration for connection with API_KEY\n\n```yaml\n    ELASTIC_HOST: \"site-1.local,site-2,site-3.com\",\n    ELASTIC_PORT: 443,\n    ELASTIC_SCHEME: \"https\",\n    ELASTIC_API_KEY_ID: 'api-key-id',\n    ELASTIC_API_KEY: 'api-key'\n```\n\n### Connect using CLOUD_ID\n\nHere is the configuration for connection with CLOUD_ID. With COULD_ID you do not need the hosts or port number.\n\n```yaml\n    ELASTIC_CLOUD_ID: 'cluster-1:dXMa5Fx...',\n    ELASTIC_HTTP_AUTH_USERNAME: \"user\",\n    ELASTIC_HTTP_AUTH_PASSWORD: \"pass\"\n```\n\n### CERT Verification\n\nIf your instance of elasticsearch or opensearch has certs that can not be verified set ELASTIC_VERIFY_CERTS to `no`.\n\n```yaml\n    ELASTIC_VERIFY_CERTS: \"no\",\n```\n\n### Other connection types\n\nIf there is a need for more advanced connection configuration the change in /app/globals/elastic_client.py should handle\nall mare advanced connection types from ThamesThrive to elastic.\n"}
