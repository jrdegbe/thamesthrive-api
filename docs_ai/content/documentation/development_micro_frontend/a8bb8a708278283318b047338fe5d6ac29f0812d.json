{"file_name": "docs/development/micro_frontend.md", "questions": ["What is the process for building a micro frontend app?"], "answer": "blic/index.html\"\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n        <!-- (1) -->\n        <div class=\"ThamesThrive-uix-your-name\" data-attribute=\"my-attribute\"></div> \n        <script src=\"../widget/index.js\"></script>\n    </body>\n    </html>\n    ```\n\n    1. Class name of `div` must be the same as `widgetName` in __src/index.js__\n\n## Building micro frontend app\n\nWhen you are done, use `yarn build:widget` to generate the micro frontend JS file. The build operation should create\n__index.js__ file in a __widget__ folder.\n\n## Micro frontend app design\n\nMost apps triggered on the customers pages are popup apps so make sure you use some popup canvas, or a\ndrawer where you place your app.\n\n!!! Info\n\n    We use material-ui for this but this is up to you how you handle it.\n\nHere is a simple example of an App where we use [Snackbar](https://mui.com/material-ui/react-snackbar/#main-content)\nfrom [material-ui](https://mui.com) to display content.\n\n\n\n```javascript\nimport React, {useState} from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport Box from \"@mui/material/Box\";\nimport {Button, Typography} from \"@mui/material\";\n\nfunction App({domElement}) {\n\n    const title = domElement.getAttribute(\"data-title\") || null\n    const message = domElement.getAttribute(\"data-message\") || null\n    const ctaLabel = domElement.getAttribute(\"data-cta-button\") || null\n    const ctaLink = domElement.getAttribute(\"data-cta-link\") || null\n    const cancelLabel = domElement.getAttribute(\"data-cancel-button\") || null\n    const vertical = domElement.getAttribute(\"data-vertical\") || \"bottom\"\n    const horizontal = domElement.getAttribute(\"data-horizontal\") || \"right\"\n    const autoHide = domElement.getAttribute(\"data-auto-hide\") || \"60000\"\n    const borderRadius = domElement.getAttribute(\"data-border-radius\") || \"2\"\n    const borderShadow = domElement.getAttribute(\"data-border-shadow\") || \"1\"\n    const minWidth = domElement.getAttribute(\"data-min-width\") || \"300\"\n    const maxWidth = domElement.getAttribute(\"data-max-width\") || \"500\"\n\n    const [open, setOpen] = useState(true)\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <Snackbar open={open} autoHideDuration={autoHide}\n                  onClose={handleClose}\n                  anchorOrigin={{vertical, horizontal}}\n        >\n            <Box\n                sx={{\n                    bgcolor: 'background.paper',\n                    boxShadow: parseInt(borderShadow),\n                    borderRadius: parseInt(borderRadius),\n                    p: 2,\n                    minWidth: parseInt(minWidth),\n                    maxWidth: parseInt(maxWidth)\n                }}\n            >\n                <Box sx={{padding: 1}}>\n                    {title && <Typography variant=\"h5\" style={{color: \"black\"}}>{title}</Typography>}\n                    {message && <Typography style={{color: \"black\"}}>{message}</Typography>}\n                </Box>\n\n                {ctaLabel && <Box sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    padding: 1\n                }}>\n                    {ctaLabel && <Button variant={\"contained\"} href={ctaLink} style={{margin: \"0 5px\"}}>\n                        {ctaLabel}\n                    </Button>}\n                    {cancelLabel && <Button variant={\"outlined\"} onClick={handleClose}>\n                        {cancelLabel}\n                    </Button>}\n                </Box>}\n\n            </Box>\n        </Snackbar>\n    );\n}\n\nexport default App;\n```\n\nYou can also use other overlays from material design like [modal](https://mui.com/material-ui/react-modal/),etc. If\nmaterial-ui is not your thing you may use any other library. It is your choice.\n\n## Testing\n\nYou can also test the react app as regular app with `yarn ", "hash": "a8bb8a708278283318b047338fe5d6ac29f0812d"}
