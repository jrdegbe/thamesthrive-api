{"file_name": "docs/development/micro_frontend.md", "questions": ["How to test a bundled app file?"], "answer": "start`. When the app is finished, you will have to bundle it and open\non the `index.html` in your browser and see if it loads.\n\n### Testing bundled app file\n\nFirst you will have to build the app with `yarn build:widget`. It will create\na __index.js__ file in __widget folder__. \n\nTo test if your app works as micro-app paste the bundled file `widget/index.js` into a regular HTML page. \n\n!!! Tip \n\n    You do not have to create index.html by your self. We have one created for you in the repo in the\n    public directory. It is called `index.html`. Paste the __script__ tag together with the configuration inside \n    the __body__ of the `index.html` and open the file. \n\n```html title=\"This is an example public/index.html from one of our micro-apps\"\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    \n    <!-- (1) -->\n    <div class=\"ThamesThrive-uix-cta-message\"\n         data-title=\"title\"\n         data-message=\"message\"\n         data-cta=\"visit\" data-cancel=\"\"\n         data-auto-hide=\"50000\"\n    ></div>\n    \n    <!-- (2) -->\n    <script src=\"../widget/index.js\"></script>\n  </body>\n</html>\n```\n\n1. The app container with the configuration in data attributes. __Please notice__ that the class of the `div` must be\n   the same as the application name defined in the `index.js` file.\n2. The bundled app script\n\nNow open the __index.html__ in the browser, and it should load your app and display it on top of the existing\nindex.html. If the index.html does not have any html then it will be empty as in our example.\n\n## How ThamesThrive injects the app\n\nThamesThrive loads the app the same as we did it in the test example above. That means with a __script__ tag and a div\ncontainer. It appends the needed tags at the bottom of the page. Like this.\n\n```html title=\"This is the example form index.html\"\n\n<div class=\"ThamesThrive-uix-your-name\" data-attribute=\"my-attribute\"></div>\n<script src=\"widget/index.js\"></script>\n```\n\n## Passing data from ThamesThrive to micro app\n\nThe micro app may need configuration. For example the pop-up message app needs message and maybe location of the pop-up\nwindow. To configure the app and pass data from ThamesThrive use `data attributes`. It can be done in `src/App.js`\n\n=== \"src/App.js\"\n\n    ```javascript\n    import React from 'react';\n    import \"regenerator-runtime/runtime\";  // (3)\n    \n    function App({domElement}) {\n    \n        const attribute1 = domElement.getAttribute(\"data-attribute-1\") || \"I am test attribute 1\"  // (1)\n        const attribute2 = domElement.getAttribute(\"data-attribute-2\") || \"I am test attribute 2\"  // (2)\n        return <h1>\"Hello world \" + {attribute}</h1>\n    \n    }\n    \n    export default App;\n    \n    ```\n\n    1. This is your app input data. Read it like this, and then you can use `attribute1` variable in you app. See index.html on how to pass data.\n    2. This is your app input data. Read it like this, and then you can use `attribute2` variable in you app.\n    3. This import may be needed when you use async functions. See Trouble-shooting below.\n\n=== \"index.html\"\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n        <div class=\"ThamesThrive-uix-your-name\" \n             data-attribute-1=\"my-attribute-1\"\n             data-attribute-2=\"my-attribute-2\"></div>\n        <script src=\"widget/index.js\"></script>\n    </body>\n    </html>\n    ```\n\n## Troubleshooting\n\nIf you use async functions in your app (what is very probable) you may encounter the problem that the app does not build\nwhen build with `yarn build:widget`. Then follow the tip below.\n\n!!! Error \"regeneratorRuntime is not defined error\"\n\n    When you see \"__regeneratorRuntime is not defined__\" that means you have to\n    add `import \"regenerator-runtime/runtime\";` to your compon", "hash": "97f98f3303a16074d9c0da467159d9c9088c46f2"}
