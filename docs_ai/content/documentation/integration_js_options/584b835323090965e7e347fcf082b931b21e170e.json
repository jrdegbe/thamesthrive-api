{
  "file_name": "docs/integration/js/options.md",
  "questions": [
    "What is the default event context attached by the ThamesThrive JavaScript snippet?",
    "How to customize event context in ThamesThrive?",
    "What is a beacon event in ThamesThrive?",
    "How to configure a beacon event in ThamesThrive?"
  ],
  "answer": "# Event options\nEvent options in ThamesThrive allow you to define the behavior of events and add contextual information associated with an\nevent. When events are triggered using the ThamesThrive JavaScript snippet, they automatically include default context\ninformation, such as browser information and metadata, to provide additional details about the event.\n\n## Default Event Context in JavaScript Snippet\n\nThe default event context attached by the ThamesThrive JavaScript snippet includes the following information:\n\n```json\n{\n  \"page\": {\n    \"url\": \"<page-url>\",\n    \"path\": \"<page-path>\",\n    \"hash\": \"<page-hash>\",\n    \"title\": \"<page-title>\",\n    \"referer\": {\n      \"host\": null,\n      \"query\": null\n    },\n    \"history\": {\n      \"length\": 10\n    }\n  },\n  \"ip\": \"127.0.0.1\"\n}\n```\n\nThe event context includes details about the current page, such as its URL, path, hash, title, referer information (host\nand query), and browsing history length. It also includes the IP address of the user.\n\n!!! Tip\n\n    When working with ThamesThrive, you have the option to configure whether or not to include page data in the context of \n    each event. This configuration is done at the tracker level and can be customized according to your requirements. \n    By adjusting the tracker context configuration, you can easily control whether or not page data is sent along with \n    each event, providing you with flexibility and control over the data captured and processed.\n\n## Customizing Event Context\n\nYou can add additional context information to events by including a \"context\" key in the options when triggering events\nusing the ThamesThrive JavaScript snippet. For example:\n\n```javascript title=\"Example\" linenums=\"1\" hl_lines=\"5\"\nwindow.tracker.track(\n   \"page-view\",\n   {},\n   {\n    \"context\": {\"tag\": \"search\"}\n   });\n```\n\nIn the example above, a custom context object with a \"tag\" key and value \"search\" is added to the event options. This\nallows you to include additional information that is relevant to your specific use case.\n\n## Beacon tracks\n\nBeacon events in ThamesThrive are events that are sent even if the customer leaves the page. These events allow you to track\nuser interactions that may occur after a user has navigated away from a page, providing valuable insights into user\nbehavior.\n\nTo configure a beacon event in ThamesThrive, you can add the asBeacon: true option to the track configuration. This\nindicates that the event should be sent as a beacon event.\n\n### Example of Beacon Event\n\nHere is an example of how to configure a beacon event in ThamesThrive:\n\n```javascript title=\"Example\" linenums=\"1\"\nwindow.tracker.track(\"page-view\", {}, {\"fire\": true, asBeacon: true});\n```\n\nIn the above example, the asBeacon option is set to true, indicating that the \"page-view\" event should be sent as a\nbeacon event, even if the customer leaves the page.\n\nBeacon events can be useful in scenarios where you want to track user interactions that may occur outside of the\nwebpage, such as form submissions, button clicks, or other events that may happen after the user has navigated away from\nthe page\n"
}
