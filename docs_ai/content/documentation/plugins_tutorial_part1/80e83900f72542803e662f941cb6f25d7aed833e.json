{"file_name": "docs/plugins/tutorial/part1.md", "questions": ["What is the process of registering a plugin in ThamesThrive?"], "answer": "t\", value=payload)` and another time `Result (port=\"NotMyEvent\", value={})`, i.e. \n      possible output ports are `[\"MyEvent\", \"NotMyEvent\"]`\n    * __version__ - enter the plugin version here\n    * __license__ - license type, ThamesThrive is able to attach the plug-in only under the `MIT` or `Apache 2.0` license\n    * __author__ - author's first and last name\n* __metadata__ - contains additional data about the plugin.\n    * __name__ - the name of the plugin to be displayed on the workflow graph\n    * __desc__ - a short description of what the plugin does\n    * __group__ - plugins are displayed in groups. The name of the group in which the plug-in is to be displayed on the\n      plug-in list. The name can be any or one of the existing names.\n\n## Automatic plug-in loading.\n\nThe only thing left is to register the plug-in on the list of available plug-ins for installation. We do this by\npointing to the file with the register function.\n\nTo do that, go to the directory: `/ThamesThrive/service/setup` and find the file `setup_plugins.py` This is the list of all\navailable plugins in the system.\n\nAt the top of this file you will find the variable `installed_plugins: Dict [str, PluginTestTemplate]` which is a\ndictionary where the key is the location of the register function. The value is an object of the `PluginTestTemplate`\ntype, it is responsible for the test data for the plug-in. We will not write tests, so our block of code should look\nlike this:\n\n=== \"/ThamesThrive/service/setup/setup_plugins.py\"\n\n    ```python\n    \"ThamesThrive.process_engine.action.v1.my_plugin_folder.my_plugin\": PluginMetadata(  # (1)\n        test=PluginTest(init=None, resource=None)\n    ),\n    ```\n\n    1. Key is the package of the register function\n\nType this into the `installed_plugins` dictionary, and we are ready to install the plugin.\n\nRestart the ThamesThrive API so the changes are activated and go to `Processing/Workflows`, open any workflow and click the\n`Reinstall Plugins` button. Alternatively you can go to `Maintenance/Plug-ins` and click the `Reinstall Plugins` button.\n\n## Wrap-up\n\nAnd this concludes the first part of the tutorial. We added the first plugin and installed it. In the second part we\nwill extend our plugin with the configuration form.\n"}
