{"file_name": "docs/qa/how_live_segmentation_works_from_technical_point_of_view.md", "questions": ["What is the technical overview of how live segmentation works?", "How are segmentation tasks managed in live segmentation?", "How does live segmentation determine segment membership for each profile?"], "answer": "# How live segmentation works from technical point of view?\nFrom a technical point of view, live segmentation involves several components and processes working together. Here's an\noverview of how live segmentation works:\n\n* Workflow Definition: Live segmentation starts with defining workflows, which outline the steps and logic for\n  segmenting profiles. These workflows specify the conditions, actions, and filters required to classify profiles into\n  segments.\n\n* Profile Retrieval: The live segmentation system fetches the defined workflows. It then retrieves the profiles that\n  need to be segmented. Profiles typically contain user data, such as demographics, preferences, behaviors, and\n  interactions.\n\n* Iteration and Execution: The system iterates over each profile and executes the defined workflow for that profile.\n  This means that the segmentation logic is applied to each individual profile to determine its segment membership.\n\n* Task Queuing: To efficiently manage the segmentation tasks, a pool of segmentations is created. Each segmentation task\n  is queued in a Redis queue, which acts as a job queue system. The queue holds the tasks until a worker is available to\n  process them.\n\n* Segmentation Job Docker: The segmentation job docker container, named \"ThamesThrive/com-ThamesThrive-segmentation-job\", is\n  responsible for orchestrating the segmentation tasks. It picks up all workflows, batches profiles and schedules them\n  for processing.\n\n* Segmentation Worker Docker: The segmentation worker docker container, named \"\n  ThamesThrive/com-ThamesThrive-segmentation-worker\" performs the actual segmentation computations. When a worker receives a\n  task from the job docker, it applies the workflow logic to the corresponding profile, determines the segment(s) the\n  profile belongs to, and stores the segmentation results in profile. This way segmentation can run in parallel.\n\n* Result Storage: After a worker finishes segmenting a profile, it stores the segmentation results in profile in key __segments__. \n\n* Cron Job: Live segmentation is often scheduled as a recurring task using a cron job. The cron job triggers the\n  segmentation process at specified intervals, ensuring that profiles are regularly segmented based on the defined\n  workflows. Docker ThamesThrive/com-ThamesThrive-segmentation-job is responsible for this.\n\nIn summary, live segmentation involves defining workflows, retrieving profiles, queuing segmentation tasks, and\nexecuting the tasks using dedicated job and worker docker containers. The segmentation process applies the workflow\nlogic to each profile, determines the corresponding segment(s), and stores the results for further analysis.\n\n---\nTHis document answers the questions:\n- Which dockers are responsible for live segmentation\n- Is live segmentation scheduled?\n- Does live segmentation run in parallel?\n", "hash": "2838e554a061ccf16ac005b4e23e5a2549afa8e4"}
