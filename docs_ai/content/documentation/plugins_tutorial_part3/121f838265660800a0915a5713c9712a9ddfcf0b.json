{"file_name": "docs/plugins/tutorial/part3.md", "questions": ["General question: ", "- What is the purpose of the code snippet provided?", "Specific questions:", "- How do you specify the credentials loaded from the resource to be in the form of a `MyResourceConfig` object?", "- What is the purpose of the `NamedEntity` object in the `Configuration` class?", "- How do you filter and display only the resources related to the plugin in the resource select field?"], "answer": ":\n\n```python\n self.credentials = resource.credentials.get_credentials(self, output=MyResourceConfig) # (1)\n```\n\n1. See `output = MyResourceConfig`\n\nIn `output=MyResourceConfig`, I requested that the credentials loaded from the resource be in the form of a\n`MyResourceConfig` object. I don't have it yet, so let's create it. We usually store resource objects in the\ndirectory: `ThamesThrive/domain/resources`\n\n=== \"ThamesThrive/domain/resources/my_resource_config.py\"\n    ```python\n    from pydantic import BaseModel, AnyHttpUrl\n    from typing import Optional \n    \n    \n    class MyResourceConfig(BaseModel):\n        url: AnyHttpUrl\n        method: str\n        api_key: Optional[str] = None\n    ```\n\n!!! Tip\n     It must have the same schema as defined in config in `ResourceSettings`. Note that I defined `url` as` AnyHttpUrl` this\n     means it can only accept a string that looks like a URL. On the other hand, `api_key` is of type `Optional[str]`, which\n     means that such a property may not be available or be None.\n\nWe already have an object, so we have to extend the plug-in configuration with the resource. The resource will be\nselected from the list of available resources, and it will be identified as the resource __name and id__.\n\nExample\n\n```json\n{\n  \"id\": \"9bb2a926-b6ae-4cad-9b3c-9380ea7bfede\",\n  \"name\": \"My API\"\n}\n```\n\nFor this purpose, we will add a resource to the plug-in configuration, which, let me remind you, is in the `register`\nfunction under the `init` property.\n\nIt should look like this:\n\n```python hl_lines=\"8-11\"\ndef register () -> Plugin:\n    return Plugin (\n        start = False,\n        spec = Spec (\n            module = __name__,\n            className = MyPlugin.__name__,\n            init = {\n                \"resource\": {\n                    \"id\": \"\",\n                    \"name\": \"\"\n                },\n                \"event_type\": \"\",\n                \"data\": \"\"\n            },\n            inputs = [\"payload\"],\n            outputs = [\"MyEvent\", \"NotMyEvent\"],\n            version = '0.1',\n            license = \"MIT\",\n            author = \"Your Name\"\n        ),\n        metadata = MetaData (\n            name = \"My first plugin\",\n            desc = 'Checks if the event type is equal to my-event.',\n            group = [\"Test plugin\"]\n        )\n    )\n\n```\n\nWe also need to extend the configuration validation object.\n\n```python hl_lines=\"4\"\nfrom ThamesThrive.domain.named_entity import NamedEntity\n\nclass Configuration(PluginConfig):\n    resource: NamedEntity # (1)\n    event_type: str\n    data: str\n\n    @validator(\"event_type\")\n    def must_not_be_empty (cls, value):\n        if len (value) == 0:\n            raise ValueError (\"Event type can not be empty.\")\n        return value\n        \n    @validator(\"data\") \n    def data_must_not_be_empty(cls, value):\n        if len(value) == 0:\n            raise ValueError(\"Data can not be empty. \")\n        return value    \n\n```\n\n1. NamedEntity is an object containing __id and name__. It is already defined in ThamesThrive.\n\n\n### Resource select field\n\nIt remains to add a field to the form that will allow user to select a resource from the list of defined\nresources. Remember that there may be different types of resources created in the system, so we need to filter them so\nthat only those related to our plugin are on the list of resources.\n\nThis is done by pointing to the tag we defined in `ResourceSettings`. In our case it is `api` __(tags=[\"api\"])__.\n\nNow we have all the information. We must extend the form with the __resource select__ field that displays available\nresources, so the user will be able to select one.\n\nPlease add this code to `form` in the `register` function.\n\n```python\nFormField(\n    id=\"resource\",\n    name=\"Resource\",\n    description=\"Select your API resource.\",\n    component=FormComponent(type=\"resource\", props={\"label\": \"API Resource\", \"tag\": \"api\"})  # (1)\n),\n```\n\n1. Notice tag property equal to `api`\n\nThe `form` property should look like this.\n\n```python hl_lines=\"6-11\"\nform = Form(group", "hash": "121f838265660800a0915a5713c9712a9ddfcf0b"}
