{"file_name": "docs/plugins/tutorial/part3.md", "questions": ["Overall content question: What is the purpose of creating a resource in a plugin and how is it used?", "Specific questions: ", "1. How can we create a resource in a plugin?", "2. How do we load a resource in a plugin?", "3. How do we validate and extend the configuration for a resource in a plugin?"], "answer": "s necessary to link the plug-in to some resource. It can be e.g. a database, API, etc. Usually, such\nresources need login credentials. We don't want to keep them in a plugin as they can be used in many plugins. For this\npurpose, it is necessary to create a resource. The resource consists of credential data and sometimes a URL.\n\nFor example, let's add a functionality to our plugin that will send the data pointed by the user to the defined API (a\nresource).\n\nFor this purpose, we will create a resource that will have the following data\n\n```json\n{\n  \"url\": \"api-url\",\n  \"method\": \"api-method\",\n  \"api_key\": \"api-key\"\n}\n```\n\nThe resources are created in the `ThamesThrive/service/setup/setup_resources.py` directory\n\nWe add the following code to the `get_resource_types()` function\n\n```python\nResourceSettings(\n    id=\"my-api-url\",  # (1)\n    name=\"Custom API URL\",  # (2)\n    icon=\"web\",  # (3)\n    tags=[\"api\"],  # (4)\n    config={  # (5)\n        \"url\": \"<api-url>\",\n        \"method\": \"<api-method>\",\n        \"api_key\": \"<api-key>\"\n        },\n    manual=\"custom_api_url_resource\"  # (6)\n),\n```\n\n1. Resource Id. A unique string that identifies the resource.\n2. Resource name\n3. Resource icon.\n4. The tag that describes the resource. It is used to filter the resources in the plugin form.\n5. Resource configuration `*.md` file name __containing documentation__ on how to get authorization data, e.g. \n   when the resource is an external system. \n6. The documentation file is located in the __ThamesThrive-api/docs/resources__ directory\n\nThis is the set of data the system needs to add a resource. After restarting the server, we can click on `Resources` in\nthe ThamesThrive GUI menu, then `Add new resource` and the list of resources will include `Custom API URL`. The resource we just created.\nThe form will also include an object:\n\n```json\n{\n  \"url\": \"<api-url>\",\n  \"method\": \"<api-method>\",\n  \"api_key\": \"<api-key>\"\n}\n```\n\nwhich we defined in the config property and which should be filled by the user.\n\n### Loading resource\n\nOnce we have a resource, we can load it in our plugin. We do this in the `set_up` method. We add the following two lines\nto the `set_up` method\n\n```python\nfrom ThamesThrive.service.storage.driver.elastic import resource as resource_db\n\nresource = await resource_db.load (config.resource.id) # (1)\nself.credentials = resource.credentials.get_credentials (self, output = MyResourceConfig) # (2)\n```\n\n1. Read resource id from `config.resource.id`. Note the object `config.resource` must be defined in the config \n2. Get data for authorization (credentials), which is an object defined in `ResourceSettings` in the `config` property,\n   and filled in by the user when creating the resource.\n\nThe first line reads the resource id from `config.resource.id`. Note that we do not have such field in the config yet\nand we need to add it (we'll do it in a moment)\n\nThe second line reads `credentials` from the resource, i.e. the object that we defined in the `config` property of\nthe `ResourceSettings` object above and a user filled when creating the resource.\n\nThe whole `set_up` method should look like this:\n\n```python\nfrom ThamesThrive.service.storage.driver.elastic import resource as resource_db\n\nclass MyPlugin (ActionRunner):\n\n    config: dict\n    credentials: MyResourceConfig # (1)\n\n    \n    async def set_up (self, config):\n      self.config = config\n      resource = await resource_db.load (config.resource.id)\n      self.credentials = resource.credentials.get_credentials (self, output = MyResourceConfig)\n\n\n    # (2)\n```\n\n1. We have added the credentials' property of type `MyResourceConfig`. We'll have to define it yet.\n2. Rest of plugin code.\n\n### Validating the resource \n\nWe still have some parts missing. We need to validate the data from the resource and extend the configuration so that\nthe user can select the appropriate resource in the form.\n\nTo verify the data from the resource and make it readable, we need to create the `MyResourceConfig` object. I named\nit in this line", "hash": "524aa50684f83311f7a71f3d47f834fa8ce221e3"}
