{"file_name": "docs/running/filtering.md", "questions": ["- How does filtering work in ThamesThrive?", "- What are some examples of operators that can be used in filtering?", "- How do wildcard searches and regular expressions work in filtering?", "- How can ranges be specified in filtering?", "- How do boolean operators work in filtering?"], "answer": "# Data searching\nFiltering is used in ThamesThrive to limit the number of event, profiles, etc. on the page. It uses a query parser that\nallows to define the rules of filtering.\n\nThe query string is parsed into a series of terms and operators. A term can be a single word a phrase, surrounded by\ndouble quotes \"quick brown\" which searches for all the words in the phrase, in the same order.\n\nOperators allow you to customize the search.\n\n## Operators\n\nYou can specify fields to search in the query syntax:\n\n* Find the records where status field contains active\n    ```\n    status:active\n    ```\n\n* where the event.type field contains __page-view__  or __purchase__\n\n    ```\n    event.type:(page-view OR purchase)\n    ```\n\n    Remember the operators like OR, AND must be uppercase.\n\n* where the __event.properties.product__ field contains the exact phrase \"Nike sneakers\"\n\n    ```\n    event.properties.product:\"Nike sneakers\"\n    ```\n\n* where the profile first name field contains Alice (note how we need to escape the space with a backslash)\n\n    ```\n    profile.data.pii.first\\ name:Alice\n    ```\n\n* where any of the fields __book.title__, __book.content__ or __book.date__ contains quick or brown (note how we need to escape the\n    * with a backslash):\n\n    ```\n    book.\\*:(quick OR brown)\n    ```\n\n* where the field title has any non-null value:\n\n    ```\n    _exists_:title\n    ```\n\n\n* where the field title does not exist:\n\n    ```\n    NOT _exists_:title\n    ```\n    or\n    ```\n    !_exists_:title\n    ```\n    \n  \n## Wildcards\n\nWildcard searches can be run on individual terms, using ? to replace a single character, and * to replace zero or more\ncharacters:\n\n```\nqu?ck bro*\n```\n\nBe aware that wildcard queries can use an enormous amount of memory and perform very badly just think how many terms\nneed to be queried to match the query string \"a* b* c*\".\n\n!!! Warning\n\n    Allowing a wildcard at the beginning of a word (eg \"*ing\") is particularly heavy, because all terms in the index \n    need to be examined, just in case they match. Leading wildcards are disabled.\n\n## Regular expressions\n\nRegular expression patterns can be embedded in the query string by wrapping them in forward-slashes (\"/\"):\n\n```\nname:/joh?n(ath[oa]n)/\n```\n\n## Fuzziness\n\nYou can run fuzzy queries using the ~ operator:\n\n```\nquikc~ brwn~ foks~\n```\n\nThe query uses the Damerau-Levenshtein distance to find all terms with a maximum of two changes, where a change is the\ninsertion, deletion or substitution of a single character, or transposition of two adjacent characters.\n\nThe default edit distance is 2, but an edit distance of 1 should be sufficient to catch 80% of all human misspellings.\nIt can be specified as:\n\n```\nquikc~1\n```\n\n!!! Warning \"Avoid mixing fuzziness with wildcards\"\n\n    Mixing fuzzy and wildcard operators is not supported. When mixed, one of the operators is not applied. For example,\n    you can search for app~1 (fuzzy) or app* (wildcard), but searches for app*~1 do not apply the fuzzy operator (~1).\n\n## Ranges\n\nRanges can be specified for date, numeric or string fields. Inclusive ranges are specified with square brackets \n[min TO max] and exclusive ranges with curly brackets {min TO max}. By default, when you filter by query ranges in \nfiltering box (right to the filter textbox) are disabled. You can define ranges as query.\n\n\n### Examples\n\n* All days in 2012:\n  ```\n  date:[2012-01-01 TO 2012-12-31]\n  ```\n  \n* Numbers 1..5\n\n  ```  \n  count:[1 TO 5]\n  ```\n\n* Tags between alpha and omega, excluding alpha and omega:\n\n  ```\n  tag:{alpha TO omega}\n  ```\n  \n* Numbers from 10 upwards\n\n  ```\n  count:[10 TO *]\n  ```\n\n* Dates before 2012\n\n  ```\n  date:{* TO 2012-01-01}\n  ```\n\n* Ranges with one side unbounded can use the following syntax:\n\n  ```\n  age:>10\n  age:>=10\n  age:<10\n  age:<=10\n  ```\n\n\n## Boolean operators\n\nWhen filtering all terms are optional, as long as one term matches the record is returned. A search for __foo bar baz__\nwill find any document that contains one or more of __fo", "hash": "5ba3ee6b6fbd8ad660b9bf7b437e169c2afe6d12"}
