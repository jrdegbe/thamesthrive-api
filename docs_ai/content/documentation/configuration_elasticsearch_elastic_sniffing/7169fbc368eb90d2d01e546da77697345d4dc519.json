{"file_name": "docs/configuration/elasticsearch/elastic_sniffing.md", "questions": ["What is Elastic sniffing?", "How to enable Elastic sniffing?", "What are the advantages of Elastic sniffing?", "What is the best solution for Elastic sniffing?", "What is the ThamesThrive configuration for Elastic sniffing?", "What is sniffing at startup?", "What is sniffing on connection failure?"], "answer": "# Elastic sniffing\nElasticsearch is a distributed system, which means its indices live in multiple nodes connected to each other, forming a\ncluster. One of the main advantages of being a distributed system \u2014 other than fault tolerance \u2014 is data is sharded into\nmultiple nodes, allowing searches to run much faster than searches run through a huge single node.\n\nA typical client configuration is a single URL that points to one node of the Elasticsearch cluster. While this is the\nsimplest configuration, the main disadvantage of this setup is all of the requests you make will be sent to that\nspecific coordination node. Since this puts a single node under stress, overall performance may be affected.\n\nOne solution is to pass a static list of nodes to the client, so your requests will be equally distributed among the\nnodes.\n\nOr you can enable a feature called sniffing.\n\nWith a static list of nodes, there\u2019s no guarantee that the nodes will always be up and running. For example, what\nhappens if you take a node down to upgrade \u2014 or you add new nodes?\n\nIf you enable sniffing, the client will start calling the `_nodes/_all/http` endpoint, and the response will be a list\nof all the nodes that are present in the cluster along with their IP addresses. Then the client will update its\nconnection pool to use all of the new nodes and keep the state of the cluster in sync with the client\u2019s connection pool.\nNote that even if the clients download the full list of nodes, the master-only nodes will not be used for generic API\ncalls.\n\nSniffing solves this discovery issue.\n\nWhen you enable sniffing, you\u2019ll make your application more resilient and able to adapt to the changes. Before doing so,\nyou should know your infrastructure, so you can decide what the best solution to adopt is. The best solution might even\nbe to not adopt sniffing.\n\nThamesThrive has some configuration that can be adopted to turn on of off sniffing. See `ThamesThrive configuration` to get more\ninformation on how to configure sniffing.\n\n## Sniffing at startup\n\nAs the name suggests, when you enable this option, the client will attempt to execute a sniff request one time only\nduring the client initialization or first usage. It will call all nodes to obtain a list of active nodes.\n\n## Sniffing on connection failure\n\nIf you enable this option, the client will attempt to execute a sniff request every time a node is faulty, which means a\nbroken connection or a dead node.\n"}
